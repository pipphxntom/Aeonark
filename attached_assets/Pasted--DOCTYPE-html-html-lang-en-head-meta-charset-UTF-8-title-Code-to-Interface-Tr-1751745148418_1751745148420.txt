<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Code to Interface Transformer</title>
  <style>
    body { margin: 0; background: #0C0C0E; overflow: hidden; }
    canvas { display: block; }
  </style>
</head>
<body>
  <script src="https://cdn.jsdelivr.net/npm/three@0.155.0/build/three.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>

  <script>
    // Scene Setup
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = 3;

    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Cube Geometry
    const geometry = new THREE.BoxGeometry();
    const loader = new THREE.TextureLoader();

    const materials = [
      new THREE.MeshBasicMaterial({ map: loader.load('code.png') }), // Code face
      new THREE.MeshBasicMaterial({ map: loader.load('website.png') }), // Website UI
      new THREE.MeshBasicMaterial({ map: loader.load('app_ui.png') }), // App UI
      new THREE.MeshBasicMaterial({ map: loader.load('ai_nodes.png') }), // AI node graph
      new THREE.MeshBasicMaterial({ color: 0x111111 }), // Side
      new THREE.MeshBasicMaterial({ color: 0x111111 })  // Side
    ];

    const cube = new THREE.Mesh(geometry, materials);
    scene.add(cube);

    // Animation Loop
    function animate() {
      requestAnimationFrame(animate);
      cube.rotation.y += 0.003;
      cube.rotation.x += 0.0015;
      renderer.render(scene, camera);
    }

    animate();

    // Responsive
    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
  </script>
</body>
</html>
